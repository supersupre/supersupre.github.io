(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{422:function(t,v,_){"use strict";_.r(v);var i=_(9),p=Object(i.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("p",[t._v("pull：是下拉代码，相等于将远程的代码下载到你本地，与你本地的代码合并")]),t._v(" "),_("p",[t._v("push：是推代码，将你的代码上传到远程的动作")]),t._v(" "),_("p",[t._v("完整的流程是：")]),t._v(" "),_("p",[t._v("第一种方法：（简单易懂）")]),t._v(" "),_("p",[t._v("1、git add .（后面有一个点，意思是将你本地所有修改了的文件添加到暂存区）")]),t._v(" "),_("p",[t._v('2、git commit -m""(引号里面是你的介绍，就是你的这次的提交是什么内容，便于你以后查看，这个是将索引的当前内容与描述更改的用户和日志消息一起存储在新的提交中)')]),t._v(" "),_("p",[t._v("3、"),_("strong",[t._v("git pull origin 远程分支名")]),t._v(" 这是下拉代码，将远程最新的代码先跟你本地的代码合并一下，如果确定远程没有更新，可以不用这个，最好是每次都执行以下，完成之后打开代码查看有没有冲突，并解决，如果有冲突解决完成以后再次执行1跟2的操作")]),t._v(" "),_("p",[t._v("4、git push origin master（git push origin 本地分支名:refs/remotes/远程分支名） 将代码推至远程就可以了")]),t._v(" "),_("p",[t._v("第二种方法：")]),t._v(" "),_("p",[t._v("1、git stash （这是将本地代码回滚值至上一次提交的时候，就是没有你新改的代码）")]),t._v(" "),_("p",[t._v("2、git pull origin 远程分支名（将远程的拉下来）")]),t._v(" "),_("p",[t._v("3、git stash pop（将第一步回滚的代码释放出来，相等于将你修改的代码与下拉的代码合并）")]),t._v(" "),_("p",[t._v("然后解决冲突，你本地的代码将会是最新的代码")]),t._v(" "),_("p",[t._v("4、git add .")]),t._v(" "),_("p",[t._v('5、git commit -m ""')]),t._v(" "),_("p",[t._v("6、git push origin master（git push origin 本地分支名:refs/remotes/远程分支名）")]),t._v(" "),_("p",[t._v("这几步将代码推至了远程")]),t._v(" "),_("p",[t._v("最后再"),_("strong",[t._v("git pull origin 远程分支名")]),t._v(" 一下，确保远程的全部拉下来，有的你刚提交完有人又提交了，你再拉一下会避免比的不是最新的问题")])])}),[],!1,null,null,null);v.default=p.exports}}]);