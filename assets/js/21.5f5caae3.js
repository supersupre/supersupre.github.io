(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{424:function(t,e,a){"use strict";a.r(e);var r=a(9),_=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git-bash-提交代码的正确姿势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-bash-提交代码的正确姿势"}},[t._v("#")]),t._v(" Git Bash 提交代码的正确姿势")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("项目经验，如需转载，请注明作者：Yuloran ("),a("a",{attrs:{href:"http://t.cn/EGU6c76",target:"_blank",rel:"noopener noreferrer"}},[t._v("t.cn/EGU6c76"),a("OutboundLink")],1),t._v(")")])])]),t._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("本文介绍如何使用 Git Bash 命令行，提交代码、解决冲突，以及如何避免冲突。有助于理解 Android Studio 的 VCS 背后的原理。")]),t._v(" "),a("h2",{attrs:{id:"检出代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检出代码"}},[t._v("#")]),t._v(" 检出代码")]),t._v(" "),a("h3",{attrs:{id:"检出远程仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检出远程仓库"}},[t._v("#")]),t._v(" 检出远程仓库")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git clone https://github.com/Yuloran/GitTutorial.git\n复制代码\n")])])]),a("p",[t._v("可以检出 "),a("code",[t._v("origin/master")]),t._v(" 分支到本地，这是 GitHub 创建仓库时默认的 "),a("code",[t._v("主机名/分支名")]),t._v("。使用 "),a("code",[t._v("git branch -vv")]),t._v(" 查看本地分支状态：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/4/16818ca63012fa79?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("p",[t._v("可见，本地分支名为 master，关联的远程分支名为 origin/master（origin 是主机名，master 是分支名）。")]),t._v(" "),a("h3",{attrs:{id:"检出远程分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检出远程分支"}},[t._v("#")]),t._v(" 检出远程分支")]),t._v(" "),a("p",[t._v("很多时候，配置管理员需要新建很多远程分支，以进行同一项目不同版本的并行开发。比如，有的分支用于需求开发，有的分支用于 Bug 修复等。此时，我们需要检出各自对应的分支，修改并提交代码。")]),t._v(" "),a("h4",{attrs:{id:"同步远程分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步远程分支"}},[t._v("#")]),t._v(" 同步远程分支")]),t._v(" "),a("p",[t._v("管理员新建远程分支后，我们需要先同步一下远程分支，才能看到新建的分支：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/4/16818ca63028631a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("p",[t._v("如上图所示，先使用 "),a("code",[t._v("git branch -a")]),t._v(" 查看本地和远程所有分支，发现并没有管理员新建的 "),a("code",[t._v("bug_fix")]),t._v(" 分支，此时输入 "),a("code",[t._v("git fetch")]),t._v("，提示有一个新分支 "),a("code",[t._v("bug_fix")]),t._v("。再次输入 "),a("code",[t._v("git branch -a")]),t._v(" 查看所有分支：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/4/16818ca630ee1fa4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("p",[t._v("嗯，确实多了一个 "),a("code",[t._v("bug_fix")]),t._v(" 分支。")]),t._v(" "),a("h4",{attrs:{id:"检出远程分支-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检出远程分支-2"}},[t._v("#")]),t._v(" 检出远程分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git checkout -b bug_fix -t remotes/origin/bug_fix\n复制代码\n")])])]),a("p",[a("code",[t._v("checkout -b")]),t._v(" 表示新建本地分支，"),a("code",[t._v("bug_fix")]),t._v(" 为本地分支名，你也可以起别的名字。"),a("code",[t._v("-t")]),t._v(" 表示追踪远程分支（track），"),a("code",[t._v("remotes/origin/bug_fix")]),t._v(" 为远程分支名，查看检出结果：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/4/16818ca631174b55?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("p",[t._v("输入 "),a("code",[t._v("git branch")]),t._v(" 查看当前所在的本地分支：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/4/16818ca63200cb31?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("p",[t._v("输入 "),a("code",[t._v("git status")]),t._v(" 查看当前分支状态：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/4/16818ca63283521c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("p",[t._v("提示你目前修改是最新的，没有任何修改可以提交。")]),t._v(" "),a("h2",{attrs:{id:"提交代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提交代码"}},[t._v("#")]),t._v(" 提交代码")]),t._v(" "),a("h3",{attrs:{id:"不良习惯"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不良习惯"}},[t._v("#")]),t._v(" 不良习惯")]),t._v(" "),a("p",[t._v("很多开发人员，喜欢在一个本地分支上，连续提交代码。这是一个很不好的习惯，尤其是在多人协作的情况下。这会导致每笔提交之间存在依赖关系，即使每笔修改之间毫无瓜葛。进而可能导致 "),a("code",[t._v("merge")]),t._v(" 冲突、"),a("code",[t._v("cherry-pick")]),t._v(" 合入冗余代码。而且，如果你突然发现，上上一笔提交有问题的时候，我觉得你可能有种想 shi 的感觉。")]),t._v(" "),a("h3",{attrs:{id:"正确姿势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正确姿势"}},[t._v("#")]),t._v(" 正确姿势")]),t._v(" "),a("p",[a("strong",[t._v("保留一个本地分支，专门用于同步代码。")])]),t._v(" "),a("p",[t._v("比如，我们现在需要在 "),a("code",[t._v("master")]),t._v(" 分支上做一个需求，首先输入 "),a("code",[t._v("git status")]),t._v(" 查看本地 "),a("code",[t._v("master")]),t._v(" 分支的状态：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/4/16818ca65ce493c4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("p",[t._v("提示本地有修改文件，没有提交。咋整呢？有两种处理方法：")]),t._v(" "),a("ul",[a("li",[t._v("啥也不管，直接输入 "),a("code",[t._v("git pull")]),t._v(" 进行同步，有冲突会自动合并，合并不了再手动解决。-> 不推荐，可能会在本地产生一条 merge 记录")]),t._v(" "),a("li",[t._v("先将本地修改 "),a("code",[t._v("stash save")]),t._v("，再使用 "),a("code",[t._v("git pull --rebase")]),t._v(" 进行同步，最后将暂存的修改 "),a("code",[t._v("stash pop")]),t._v("，有冲突会自动合并，合并不了再手动解决。-> 推荐，自动变基，不会在本地产生 merge 记录")])]),t._v(" "),a("h4",{attrs:{id:"_1-暂存代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-暂存代码"}},[t._v("#")]),t._v(" 1. 暂存代码")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git stash save [-u] 'update readme.md'\n复制代码\n")])])]),a("p",[a("code",[t._v("[-u]")]),t._v(" 表示参数可选，加 "),a("code",[t._v("-u")]),t._v(" 会将本地新增文件也暂存，不加则仅暂存本地修改部分。"),a("code",[t._v("'update readme.md'")]),t._v(" 为描述，下面列出 "),a("code",[t._v("git stash")]),t._v(" 支持的所有操作：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/4/16818ca65f9575ef?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git stash list")]),t._v(" 显示所有暂存记录")]),t._v(" "),a("li",[a("code",[t._v("git stash show stash@{0}")]),t._v(" 查看指定的暂存记录")]),t._v(" "),a("li",[a("code",[t._v("git stash pop stash@{0}")]),t._v(" 弹出指定的暂存记录")]),t._v(" "),a("li",[a("code",[t._v("git stash drop stash@{0}")]),t._v(" 删除指定的暂存记录")]),t._v(" "),a("li",[a("code",[t._v("git stash clear")]),t._v(" 清空暂存记录")])]),t._v(" "),a("h4",{attrs:{id:"_2-同步代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-同步代码"}},[t._v("#")]),t._v(" 2. 同步代码")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git pull --rebase\n复制代码\n")])])]),a("p",[t._v("同步结果：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/4/16818ca664f8f36d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("p",[t._v("提示已经是最新的。如果本地代码不是最新的，应当类似于下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/4/16818ca66954ea0e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("h4",{attrs:{id:"_3-弹出暂存代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-弹出暂存代码"}},[t._v("#")]),t._v(" 3. 弹出暂存代码")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git stash pop [stash@{0}]\n复制代码\n")])])]),a("p",[a("code",[t._v("[stash@{0}]")]),t._v(" 表示可选，不加默认弹出栈顶元素，也可以指定弹出哪一个暂存记录。弹出结果如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/4/16818ca686c40863?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("p",[t._v("提示有冲突。莫要惊慌，有冲突解决就是了，毕竟咱们干的都是“小项目”，除非文件换行符变了，否则不会冲突太多。像 "),a("code",[t._v("AOSP")]),t._v("、"),a("code",[t._v("Mokee")]),t._v(" 那种大型项目，发生冲突才是坑爹。比如国内的手机厂商，每次大版本升级时（比如从 Android 8.0 升到 Android 9.0），都需要花几个月的时间才能使版本稳定，这也是为什么国产手机安卓版本总是落后于 Google 的原因。扯远了，还是先 "),a("code",[t._v("git status")]),t._v(" 看一下工作区状态：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/4/16818ca68aab3df8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("p",[t._v("原来是 "),a("code",[t._v("README.md")]),t._v(" 文件修改冲突了，而且 Git 还贴心地提示你：")]),t._v(" "),a("ul",[a("li",[t._v("使用 "),a("code",[t._v("git reset HEAD")]),t._v(" 来丢弃本地修改")]),t._v(" "),a("li",[t._v("使用 "),a("code",[t._v("git add ...")]),t._v(" 标记冲突解决（省略号表示后面可接多个文件，以空格分隔）")])]),t._v(" "),a("p",[t._v("我们先使用 "),a("code",[t._v("git diff")]),t._v(" 看看哪里冲突了：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/4/16818ca68a5764d4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("p",[t._v("git 使用：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<<<<<<< Updated upstream\n\n=======\n>>>>>>> Stashed changes\n复制代码\n")])])]),a("p",[t._v("标记冲突状态，"),a("code",[t._v("=======")]),t._v(" 上面的是远程仓库上别人的修改，下面的是我们的本地修改。嗯，这个冲突是我人为制作的，所以比较简单。在 IDE 中手动解决该冲突后，使用 "),a("code",[t._v("git add README.md")]),t._v(" 命令标记冲突已解决：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/4/16818ca68f2f3f88?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("p",[a("code",[t._v("README.md")]),t._v(" 咋变原谅色了呢？因为我们刚才用了 "),a("code",[t._v("git add")]),t._v(" 命令，将其添加到了暂存区，所以上面显示的是 "),a("code",[t._v("Changes to be committed")]),t._v("，也就是待提交。提交啥啊，刚解决完冲突，需求还没做呢！所以，我们使用 "),a("code",[t._v("git reset ...")]),t._v(" 命令，将其从暂存区撤出：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/4/16818ca69804b930?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"image.png"}})]),t._v(" "),a("p",[a("code",[t._v("...")]),t._v(" 表示可选，不加即撤出所有，加了即撤出指定的文件。"),a("strong",[t._v("Linux 帮助手册中很多使用 `` 或者 "),a("code",[t._v("[arg]")]),t._v(" 表示参数可选，"),a("code",[t._v("<>")]),t._v(" 和 "),a("code",[t._v("[]")]),t._v(" 是不需要输入的，这个已经成为开发人员的习惯用法。")])]),t._v(" "),a("h4",{attrs:{id:"_4-新建本地分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-新建本地分支"}},[t._v("#")]),t._v(" 4. 新建本地分支")]),t._v(" "),a("p",[t._v("很多人这个时候，就直接在本地 "),a("code",[t._v("master")]),t._v(" 分支上疯狂输出需求代码了。NO！我们应该针对不同的开发内容，新建不同的本地分支。比如 "),a("code",[t._v("feature_shopping")]),t._v("，"),a("code",[t._v("bugfix_tombstone")]),t._v(" 等等，假设我们现在需要实现一个购物功能，我们应该使用 "),a("code",[t._v("git checkout -b feature_shopping")]),t._v(" 新建一个本地分支来实现这个需求：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/4/16818ca6a7807ab0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("h4",{attrs:{id:"_5-提交代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-提交代码"}},[t._v("#")]),t._v(" 5. 提交代码")]),t._v(" "),a("p",[t._v("连续通宵5天后，我们的需求终于做完了，可以提交代码了：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/4/16818ca6bd2a8339?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("p",[a("code",[t._v('git commit -m "update README.md"')]),t._v(" 表示将修改提交到本地仓库，此时还没有推送到远程仓库。"),a("code",[t._v("-m")]),t._v(" 后面的是修改描述，这是一种简便写法。而大公司都会对提交的描述有格式要求，所以需要先配置 commit 模板：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git config --global commit.template ~/.gitmsg\n复制代码\n")])])]),a("p",[t._v("编辑该模板：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/4/16818ca6c1433395?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("p",[t._v("输入 "),a("code",[t._v("git commit")]),t._v("：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/4/16818ca6d2f588a1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("p",[t._v("模板已经生效了，输入修改描述即可。我这里配置的 Git 编辑器是 vim，你也可以配置成别的：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git config --global core.editor notepad\n复制代码\n")])])]),a("p",[t._v("这样，就可以用记事本来编写修改描述了。")]),t._v(" "),a("h4",{attrs:{id:"_6-追加提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-追加提交"}},[t._v("#")]),t._v(" 6. 追加提交")]),t._v(" "),a("p",[a("code",[t._v("commit")]),t._v(" 之后，本地又修改了一些文件，此时需要使用 "),a("code",[t._v("git commit --amend")]),t._v(" 追加提交：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/4/16818ca6d7fd52a3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("h4",{attrs:{id:"_7-回退提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-回退提交"}},[t._v("#")]),t._v(" 7. 回退提交")]),t._v(" "),a("p",[a("code",[t._v("commit")]),t._v(" 之后，发现提交多了，把不需要提交的也提交了，此时需要回退，有两种方式：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git reset [--soft] commit_id")]),t._v("，软回退，不会丢弃文件修改记录，"),a("code",[t._v("--soft")]),t._v(" 不加也可以。")]),t._v(" "),a("li",[a("code",[t._v("git reset --hard commit_id")]),t._v("，硬回退，丢弃所有修改。一般仅在需要回退到指定节点验证问题时使用。")])]),t._v(" "),a("p",[t._v("查看 commit_id：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git log -1\n复制代码\n")])])]),a("p",[a("code",[t._v("-1")]),t._v(" 表示只查看提交记录里的最后一条：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/4/16818ca6e023c6b5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("p",[t._v("输入 "),a("code",[t._v("git reset 306c8b26360adfbdb3992f62514e8d58626f2d20")]),t._v("，即可回退提交。然后重新 "),a("code",[t._v("git add ...")]),t._v("，"),a("code",[t._v("git commit")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"_8-推送代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-推送代码"}},[t._v("#")]),t._v(" 8. 推送代码")]),t._v(" "),a("p",[a("code",[t._v("commit")]),t._v(" 之后很多人就直接 "),a("code",[t._v("git push")]),t._v(" 了，这是不对的，应当先同步代码。由于我们现在在新建的本地分支 "),a("code",[t._v("feature_shopping")]),t._v(" 上，这个分支没有关联远程分支，所以无法也不应该使用 "),a("code",[t._v("git pull --rebase")]),t._v(" 来同步代码。正确的操作为：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/4/16818ca6e7f00513?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),t._v(" "),a("ol",[a("li",[a("code",[t._v("git checkout master")]),t._v("：切到本地主分支")]),t._v(" "),a("li",[a("code",[t._v("git pull --rebase")]),t._v("：同步代码")]),t._v(" "),a("li",[a("code",[t._v("git checkout feature_shopping")]),t._v("：切换到本地需求分支")]),t._v(" "),a("li",[a("code",[t._v("git rebase master")]),t._v("：将本地主分支代码，合入到本地需求分支（可能有冲突，按照 Git 的提示修复即可）")]),t._v(" "),a("li",[a("code",[t._v("git push origin HEAD:refs/for/master")]),t._v("：将本地需求分支的提交推送到远程 "),a("code",[t._v("master")]),t._v(" 分支")])]),t._v(" "),a("h2",{attrs:{id:"结语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[t._v("#")]),t._v(" 结语")]),t._v(" "),a("p",[t._v("Git Bash 每一个命令的操作结果，成功或者出错的描述都很详细。遇到问题的时候，只要按照提示，一步步操作，一般都能解决。")])])}),[],!1,null,null,null);e.default=_.exports}}]);